# Copyright (C) 2010 Hans-Peter Jansen <hpj@urpla.net>
# Copyright (C) 2011 Arun Srinivasan <rulfzid@gmail.com>
# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause
from __future__ import annotations

from PySide6.QtWidgets import QStyledItemDelegate, QStyle
from PySide6.QtCore import Qt, QEvent, QPoint, QPointF, QRectF, QModelIndex, QLine, QLineF, qFuzzyCompare, qFuzzyIsNull
from PySide6.QtGui import QPen

#from starrating import StarRating
#from stareditor import StarEditor


class Line():
    DataRole = Qt.UserRole + 1

    def __init__(self, from_, to_):
        self._from = from_
        self._to = to_

    #bool isEmpty() const { return qFuzzyCompare(from, to); }
    #bool isFull() const { return !isEmpty() && qFuzzyIsNull(from) && qFuzzyCompare(1., to); }
    def isEmpty(self):
         return qFuzzyCompare(self._from, self._to)

    def isFull(self): 
        return (not self.isEmpty()) and qFuzzyIsNull(self._from) and qFuzzyCompare(1., self._to)

    """
    QLineF toQLine(const QRect &viewport) const
     {
         const QPoint &center = viewport.center();
         QPointF p1(viewport.left(), center.y());
         QPointF p2(viewport.right(), center.y());

         if (!isFull()) {
             p1.rx() = viewport.left() + viewport.width() * qreal(from);
             p2.rx() = viewport.left() + viewport.width() * qreal(to);
         }

         return { p1, p2 };
     }
     """
    def toQLine(self, viewport):
        center = viewport.center()
        p1 = QPointF(viewport.left(), center.y())
        p2 = QPointF(viewport.right(), center.y())

        if not self.isFull():
            #p1.setX( viewport.left() + viewport.width() * qreal(self._from))
            #p2.setX( viewport.left() + viewport.width() * qreal(self._to))
            p1.setX( viewport.left() + viewport.width() * self._from)
            p2.setX( viewport.left() + viewport.width() * self._to)
        

        #return  QRectF(p1, p2) 
        return  QLineF(p1, p2) 


    @classmethod
    def fromQLine(self, line, viewport):   # QLine  QRect
        #const qreal w(viewport.width());
        #return { qreal(line.x1()) / w, qreal(line.x2()) / w };
        w  = viewport.width()
        return Line( line.x1() / w, line.x2() / w )

class LineDelegate(QStyledItemDelegate):

    def __init__(self, parent=None):
        super().__init__(parent)
        #self.m_startIndex = 0
        #self.m_startPoint = 0
        self.m_startIndex = QModelIndex();
        self.m_startPoint = { -1, -1 };
        #self.m_linePen =  QPen(Qt.darkGreen)
        self.m_linePen =  QPen(Qt.green)
        self.m_linePen.setWidth(4.0)

    def paint(self, painter, option, index):
        QStyledItemDelegate.paint(self, painter, option, index)
        line = index.data(Line.DataRole)
        #print(type(line))
        if line is None:
            #print("NonType")
            return
        elif not type(line) is Line:
            #print("no Line")
            return
        #print("Line")

        lineF = line.toQLine(option.rect)
        painter.save()

        painter.setPen(self.m_linePen)
        painter.drawLine(lineF)

        painter.restore()

        """ CPP
        QStyledItemDelegate::paint(painter, option, index);

        const QVariant &lineData = index.data(Line::DataRole);
        if (lineData.isValid() && lineData.canConvert<Line>()) {
            const Line &line = lineData.value<Line>();
            const QLineF &lineF = line.toQLine(option.rect);
            //        LOG << index.row() << index.column() << option.rect << line.from << line.to << lineF;

            painter->save();

            painter->setPen(m_linePen);
            painter->drawLine(lineF);

            painter->restore();
        }
        """
        """
        if index.column() == 3:
            star_rating = StarRating(index.data())

            # If the row is currently selected, we need to make sure we
            # paint the background accordingly.
            if option.state & QStyle.State_Selected:
                # The original C++ example used option.palette.foreground() to
                # get the brush for painting, but there are a couple of
                # problems with that:
                #   - foreground() is obsolete now, use windowText() instead
                #   - more importantly, windowText() just returns a brush
                #     containing a flat color, where sometimes the style
                #     would have a nice subtle gradient or something.
                # Here we just use the brush of the painter object that's
                # passed in to us, which keeps the row highlighting nice
                # and consistent.
                painter.fillRect(option.rect, painter.brush())

            # Now that we've painted the background, call starRating.paint()
            # to paint the stars.
            star_rating.paint(painter, option.rect, option.palette)
        else:
            QStyledItemDelegate.paint(self, painter, option, index)
        """

    ### https://doc.qt.io/qtforpython-6/PySide6/QtCore/QEvent.html#PySide6.QtCore.QEvent.Type
    """
    def event(self, event):
        if event.type() == QEvent.Enter:
            print("Enter")
        elif event.type() == QEvent.Leave:
            print("Leave")
        return super().event(event)

    def eventFilter(self, obj, event):
        if event.type() == QEvent.Enter:
            print("Enter")
        elif event.type() == QEvent.Leave:
            print("Leave")
        return super().eventFilter(obj, event)
    """

    def editorEvent(self, event, model, option, index):
        #print("editorEvent", event.type())
        if event.type() == QEvent.MouseButtonPress:
            #print("Press")
            self.handleMousePress(event, model, option, index)
        elif event.type() == QEvent.MouseMove:
            #print("Move")
            self.handleMouseMove(event, model, option, index)
        elif event.type() == QEvent.MouseButtonRelease:
            #print("Release")
            self.handleMouseRelease(event, model, option, index)
        elif event.type() == QEvent.Enter:
            print("Enter2")
        elif event.type() == QEvent.Leave:
            print("Leave2")
        return super().editorEvent(event, model, option, index)


    def handleMousePress(self, event, model, option, index):
        if index.isValid():
           self.m_startIndex = index
           #print(event.position().x())
           #print(option.rect.x())
           #print(option.rect.center().y())
           self.m_startPoint = QPoint( event.position().x() - option.rect.x(), option.rect.center().y() )
    
    def handleMouseMove(self, event, model, option, index):
        endPoint = QPoint(event.position().x() - option.rect.x(), option.rect.center().y())
        if (self.m_startIndex != index):
            self.m_startIndex = index
            self.m_startPoint = endPoint
        

        #const Line &line = Line::fromQLine({ self.m_startPoint, endPoint }, option.rect);
        line = Line.fromQLine( QLine(self.m_startPoint, endPoint) , option.rect);

        #model.setData(index, QVariant::fromValue(line), Line::DataRole);
        model.setData(index, line, Line.DataRole);

    def handleMouseRelease(self, event, model, option, index):
        self.m_startIndex = QModelIndex();
        self.m_startPoint = { -1, -1 };

    """
    def sizeHint(self, option, index):
        if index.column() == 3:
            star_rating = StarRating(index.data())
            return star_rating.sizeHint()
        else:
            return QStyledItemDelegate.sizeHint(self, option, index)

    def createEditor(self, parent, option, index):
        if index.column() == 3:
            editor = StarEditor(parent)
            editor.editing_finished.connect(self.commit_and_close_editor)
            return editor
        else:
            return QStyledItemDelegate.createEditor(self, parent, option, index)

    def setEditorData(self, editor, index):
        if index.column() == 3:
            editor.star_rating = StarRating(index.data())
        else:
            QStyledItemDelegate.setEditorData(self, editor, index)

    def setModelData(self, editor, model, index):
        if index.column() == 3:
            model.setData(index, editor.star_rating.star_count)
        else:
            QStyledItemDelegate.setModelData(self, editor, model, index)

    def commit_and_close_editor(self):
        editor = self.sender()

        # The commitData signal must be emitted when we've finished editing
        # and need to write our changed back to the model.
        self.commitData.emit(editor)
        self.closeEditor.emit(editor, QStyledItemDelegate.NoHint)
    """


if __name__ == "__main__":
    """ Run the application. """
    from PySide6.QtWidgets import (QApplication, QTableWidget, QTableWidgetItem,
                                   QAbstractItemView)
    import sys

    app = QApplication(sys.argv)

    # Create and populate the tableWidget
    table_widget = QTableWidget(4, 4)
    table_widget.setItemDelegate(LineDelegate(table_widget))
    #table_widget.setEditTriggers(QAbstractItemView.DoubleClicked
    #                             | QAbstractItemView.SelectedClicked)
    #table_widget.setSelectionBehavior(QAbstractItemView.SelectRows)
    table_widget.setHorizontalHeaderLabels(["Title", "Genre", "Artist", "Rating"])

    data = [["Mass in B-Minor", "Baroque", "J.S. Bach", 5],
            ["Three More Foxes", "Jazz", "Maynard Ferguson", 4],
            ["Sex Bomb", "Pop", "Tom Jones", 3],
            ["Barbie Girl", "Pop", "Aqua", 5]]

    for r in range(len(data)):
        table_widget.setItem(r, 0, QTableWidgetItem(data[r][0]))
        table_widget.setItem(r, 1, QTableWidgetItem(data[r][1]))
        table_widget.setItem(r, 2, QTableWidgetItem(data[r][2]))
        #item = QTableWidgetItem()
        #item.setData(0, StarRating(data[r][3]).star_count)
        #table_widget.setItem(r, 3, item)

    table_widget.resizeColumnsToContents()
    table_widget.resize(500, 300)
    table_widget.show()

    sys.exit(app.exec())
